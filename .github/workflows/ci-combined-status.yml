name: CI - Combined Status Check

on:
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened]

jobs:
  wait-for-checks:
    runs-on: ubuntu-latest
    name: Wait for all CI checks to complete
    
    steps:
    - name: Wait for Main Project CI
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: "Compile Main Project with OpenJDK 17"
        ref: ${{ github.event.pull_request.head.sha }}
        timeoutSeconds: 600
        intervalSeconds: 10
        
    - name: Wait for OpenJDK 8 Migration CI
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-openjdk8
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: "Compile OpenJDK 8 Migration Module with OpenJDK 8"
        ref: ${{ github.event.pull_request.head.sha }}
        timeoutSeconds: 600
        intervalSeconds: 10
        
    - name: Check all results
      run: |
        echo "=== CI Status Summary ==="
        echo "Main Project (JDK 17): ${{ steps.wait-for-main.outputs.conclusion }}"
        echo "OpenJDK 8 Migration (JDK 8): ${{ steps.wait-for-openjdk8.outputs.conclusion }}"
        
        if [[ "${{ steps.wait-for-main.outputs.conclusion }}" == "success" && "${{ steps.wait-for-openjdk8.outputs.conclusion }}" == "success" ]]; then
          echo "✅ All CI checks passed! Ready to merge."
          exit 0
        else
          echo "❌ Some CI checks failed. Please fix before merging."
          exit 1
        fi

  pr-status-comment:
    runs-on: ubuntu-latest
    needs: [wait-for-checks]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR Status
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          
          const mainCheck = checks.check_runs.find(check => 
            check.name === 'Compile Main Project with OpenJDK 17'
          );
          const jdk8Check = checks.check_runs.find(check => 
            check.name === 'Compile OpenJDK 8 Migration Module with OpenJDK 8'
          );
          
          const mainStatus = mainCheck ? mainCheck.conclusion : 'pending';
          const jdk8Status = jdk8Check ? jdk8Check.conclusion : 'pending';
          
          const statusEmoji = (status) => {
            switch(status) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'pending': return '⏳';
              default: return '❓';
            }
          };
          
          const comment = `## 🚀 CI Status Report
          
          | Check | Status | Result |
          |-------|--------|---------|
          | Main Project (OpenJDK 17) | ${statusEmoji(mainStatus)} | ${mainStatus} |
          | OpenJDK 8 Migration (OpenJDK 8) | ${statusEmoji(jdk8Status)} | ${jdk8Status} |
          
          ${mainStatus === 'success' && jdk8Status === 'success' 
            ? '🎉 **All checks passed!** This PR is ready for review and merge.' 
            : '⚠️ **Some checks failed.** Please review the failed checks and fix any issues before merging.'
          }
          
          ---
          *This comment is automatically updated when CI status changes.*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('🚀 CI Status Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
          }
